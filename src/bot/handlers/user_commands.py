import os
import asyncio
import clipboard
from aiogram import Router, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message
from watchdog.watchmedo import command
from loguru import logger
from src.logging_setup import log_easy
from src.config import project_root

commands_router = Router(name="user_commands")


# In a future for friends list
async def get_user_info(message: Message) -> str:
    from src.config import ADMIN_ID
    text = ''
    if message.from_user.id != ADMIN_ID:
        text = f'| ID={message.from_user.id}'
        if message.from_user.username:
            text += f" - @{message.from_user.username}"
    return text


@commands_router.message(CommandStart())
async def cmd_start(message: Message):
    text_user = await get_user_info(message)
    log_easy(f"/start {text_user}")
    logger.info(f"Received /start {text_user}")

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç <b>NuControl</b>\n\n"
        "https://github.com/Artisan-memory/NuControlüåà\n"
    )


@commands_router.message(Command("kb", "keyboard"))
async def cmd_keyboard(message: Message):
    from src.bot.keyboards.reply import main
    text_user = await get_user_info(message)
    log_easy(f"/keyboard {text_user}")
    logger.info(f"Received /keyboard {text_user}")

    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–Ω—è—Ç–∞", reply_markup=main)


@commands_router.message(Command("help"))
async def cmd_help(message: Message):
    text_user = await get_user_info(message)
    log_easy(f"/help {text_user}")
    logger.info(f"Received /help {text_user}")

    text = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
    text += ("""
<b>/shutdown</b> –∏–ª–∏ <b>/s</b> - –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä  
<b>/reboot</b> –∏–ª–∏ <b>/r</b> - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä  
<b>/hibernate</b> –∏–ª–∏ <b>/h</b> - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º  
<b>/lock</b> –∏–ª–∏ <b>/l</b> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä  
<b>/logout</b> - –í—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏  
<b>/cancel</b> - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞, –≥–∏–±–µ—Ä–Ω–∞—Ü–∏—è)  
<b>/check</b> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞  
<i>/cpu</i> - –¢–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ —Å–∂–∞—Ç–æ  
<b>/launch</b> <i>{program_name}</i> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É  
<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/launch notepad</code>  
<b>/link</b> <i>{url}</i> - –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É  
<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/link http://google.com</code> –∏–ª–∏ <code>/link google.com</code> (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "www", –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞)  
<b>/task</b> <i>{process_name}</i> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ  
<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/task chrome</code>  
<b>/screen</b> - –°–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ  
<b>/keyboard</b> –∏–ª–∏ <b>/kb</b> - –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É  
<b>/webcam</b> –∏–ª–∏ <b>/web</b> –∏–ª–∏ <b>/photo</b> - –°–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã  
<b>/download</b> <i>{file_path}</i> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é  
<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/download C:/Users/Name/Documents/file.txt</code>  
<b>/say</b> <i>{text}</i> - –ü—Ä–æ–∏–≥—Ä–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞  
<i>–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏.</i>  
<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/say Hello World!</code>  
<b>/clipboard</b> –∏–ª–∏ <b>/clipboard</b> <i>{text}</i> - –ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞  
<i>–ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç (—Ç–µ–∫—Å—Ç), –æ–Ω –æ–±–Ω–æ–≤–∏—Ç –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞</i>  
<i>–ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞</i>  
<b>/wifi</b> - –ü–æ–∫–∞–∑–∞—Ç—å SSID –∏ –ø–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö Wi-Fi —Å–µ—Ç–µ–π –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ  
<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/wifi</code>  
<b>/ls</b> - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ <code>ls</code> –≤ Linux)  
<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/ls</code>  
<b>/cd</b> <i>{directory_path}</i> - –ü–µ—Ä–µ–π—Ç–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ <code>cd</code> –≤ Windows)  
<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/cd C:/Users/Name/Documents</code>


<b>–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö —á–µ—Ç—ã—Ä–µ—Ö –∫–æ–º–∞–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É—è <i>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã + –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö</i> –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.</b>  
<i>–ü—Ä–∏–º–µ—Ä: /shutdown 2</i> –∏–ª–∏ <i>/s 2</i> (–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã).""")
    await message.answer(text=text)


@commands_router.message(Command("lock", "l"))
async def cmd_lock(message: Message):
    from src.bot.handlers.user_commands_func import lock_screen
    text_user = await get_user_info(message)
    log_easy(f"/lock {text_user}")
    logger.info(f"Received /lock {text_user}")

    text = await lock_screen()
    await message.answer(text)


@commands_router.message(Command("shutdown", "s"))
async def cmd_shutdown(message: Message, command: CommandObject):
    from src.bot.handlers.user_commands_func import shutdown
    text_user = await get_user_info(message)
    log_easy(f"/shutdown {text_user}")
    logger.info(f"Received /shutdown {text_user}")

    text = await shutdown(args=command.args)
    await message.answer(text)


@commands_router.message(Command("reboot", "r"))
async def cmd_reboot(message: Message, command: CommandObject):
    from src.bot.handlers.user_commands_func import reboot
    text_user = await get_user_info(message)
    log_easy(f"/reboot {text_user}")
    logger.info(f"Received /reboot {text_user}")

    text = await reboot(args=command.args)
    await message.answer(text)


@commands_router.message(Command("hibernate", "h"))
async def cmd_hibernate(message: Message, command: CommandObject):
    from src.bot.handlers.user_commands_func import hibernate
    text_user = await get_user_info(message)
    log_easy(f"/hibernate {text_user}")
    logger.info(f"Received /hibernate {text_user}")

    text = await hibernate(args=command.args)
    await message.answer(text)


@commands_router.message(Command("cancel"))
async def cmd_cancel(message: Message):
    from src.bot.handlers.user_commands_func import cancel
    text_user = await get_user_info(message)
    log_easy(f"/cancel {text_user}")
    logger.info(f"Received /cancel {text_user}")

    text = await cancel()
    await message.answer(text)
    log_easy(f"/cancel completed {text_user}")


@commands_router.message(Command("check"))
async def cmd_check(message: Message):
    from src.bot.handlers.user_commands_func import check_hardware
    text_user = await get_user_info(message)
    log_easy(f"/check {text_user}")
    logger.info(f"Received /check {text_user}")

    hardware_info = await check_hardware()
    await message.answer(text=hardware_info)


@commands_router.message(Command("cpu"))
async def cmd_check(message: Message):
    from src.bot.handlers.user_commands_func import get_system_info
    text_user = await get_user_info(message)
    log_easy(f"/check {text_user}")
    logger.info(f"Received /check {text_user}")

    text = await get_system_info()
    await message.answer(text)


@commands_router.message(Command("screen", "screenshot"))
async def cmd_screen(message: Message, bot: Bot):
    from src.bot.handlers.user_commands_func import screenshot
    text_user = await get_user_info(message)
    log_easy(f"/screen {text_user}")
    logger.info(f"Received /screen {text_user}")

    image, path = await screenshot()
    await bot.send_document(chat_id=message.chat.id, document=image)
    os.remove(path)


@commands_router.message(Command('webcam', 'web', 'photo'))
async def cmd_webcam(message: Message, bot: Bot):
    from src.bot.handlers.user_commands_func import webcam
    text_user = await get_user_info(message)
    log_easy(f"/webcam {text_user}")
    logger.info(f"Received /webcam {text_user}")

    text, image, path = await webcam()
    if image and path is not None:
        await bot.send_document(chat_id=message.chat.id, document=image)
        os.remove(path)
    else:
        await bot.send_message(chat_id=message.chat.id, text=text)


@commands_router.message(Command("launch"))
async def cmd_launch(message: Message, bot: Bot, command: CommandObject):
    from src.bot.handlers.user_commands_func import launch
    text_user = await get_user_info(message)
    log_easy(f"/launch {text_user}")
    logger.info(f"Received /launch {text_user}")

    try:
        text = await asyncio.wait_for(launch(args=command.args), timeout=5)
    except asyncio.TimeoutError:
        text = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n" \
               "–í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
        log_easy(f"/launch timeout exceeded {text_user}")

    await bot.send_message(chat_id=message.chat.id, text=text)


@commands_router.message(Command("link"))
async def cmd_link(message: Message, bot: Bot, command: CommandObject):
    from src.bot.handlers.user_commands_func import link
    text_user = await get_user_info(message)
    log_easy(f"/link {text_user}")
    logger.info(f"Received /link {text_user}")

    text = await link(args=command.args)
    await bot.send_message(chat_id=message.chat.id, text=text)
    log_easy(f"/link completed {text_user}")


@commands_router.message(Command('clipboard'))
async def clipboard_command(message: Message, bot: Bot, command: CommandObject):
    from src.bot.handlers.user_commands_func import clipboard, replace_tags
    text_user = await get_user_info(message)
    log_easy(f"/clipboard {text_user}")
    logger.info(f"Received /clipboard {text_user}")

    text = await clipboard(args=command.args)

    try:
        await bot.send_message(chat_id=message.chat.id, text=text, parse_mode='Markdown')
    except TelegramBadRequest:
        text = await replace_tags(text, '*', '<b>', '</b>')
        text = await replace_tags(text, '`', '<pre>', '</pre>')
        await bot.send_message(chat_id=message.chat.id, text=text, parse_mode='html')


@commands_router.message(Command("task"))
async def cmd_task(message: Message, command: CommandObject):
    from src.bot.handlers.user_commands_func import task
    text_user = await get_user_info(message)
    log_easy(f"/task {text_user}")
    logger.info(f"Received /task {text_user}")

    task_kb = None
    try:
        text, task_kb = await asyncio.wait_for(task(args=command.args), timeout=5)
    except asyncio.TimeoutError:
        text = "Smth went wrong...\n" \
               "timeout exceeded üò®"
        logger.error(f"/task timeout exceeded {text_user}")

    if text.strip():  # Check if the text is empty
        if task_kb is not None:
            await message.answer(text=text, reply_markup=task_kb)
        else:
            await message.answer(text=text)
    else:
        logger.info(f"Empty text received for /task. {text}")


@commands_router.message(Command("say"))
async def cmd_say(message: Message, command: CommandObject):
    from src.bot.handlers.user_commands_func import say
    text_user = await get_user_info(message)
    log_easy(f"/say {text_user}")
    logger.info(f"Received /say {text_user}")

    text = await say(command.args)
    await message.answer(text=text)
    log_easy(f"/say completed {text_user}")


###################################### TESTING CODE BELOW, DO NOT MODIFY

cd = os.path.expanduser("~")
from aiogram.utils.deep_linking import decode_payload


@commands_router.message(Command("ls"))
async def list_directory(message: Message):
    text_user = await get_user_info(message)
    log_easy(f"/ls {text_user}")
    logger.info(f"Received /ls {text_user}")

    try:
        contents = os.listdir(cd)
        if not contents:
            await message.answer("–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞.")
            log_easy(f"/ls - directory is empty {text_user}")
        else:
            response = f"<b>–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n <code>{cd}</code>\n\n" \
                       "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç</b>:\n\n"
            for item in contents:
                response += f"<b>-</b> <code>{item}</code>\n"
            await message.answer(response)
    except Exception as e:
        logger.error(f"/ls error: {str(e)} {text_user}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: <b>{str(e)}</b>")


@commands_router.message(Command("cd"))
async def change_directory(message: Message, bot: Bot, command: CommandObject):
    text_user = await get_user_info(message)
    log_easy(f"/cd {text_user}")
    logger.info(f"Received /cd {text_user}")

    a = message.text
    print(a)
    try:
        global cd
        args = command.args
        if args:
            new_directory = args
            logger.info(new_directory)
            new_path = os.path.join(cd, new_directory)
            if os.path.exists(new_path) and os.path.isdir(new_path):
                cd = new_path
                await bot.send_message(message.chat.id, f"–í—ã –≤: <code>{cd}</code>")
            else:
                await bot.send_message(message.chat.id, f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            text = f"""<i>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞! </i>
<blockquote><b>–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n </b>/cd + –∏–º—è –ø–∞–ø–∫–∏ –∏–ª–∏ –ø—É—Ç—å</blockquote>\n\n
P.S. –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤:\n <code>{cd}</code>"""
            await bot.send_message(message.chat.id, text)
    except Exception as e:
        logger.error(f"/cd error: {str(e)} {text_user}")
        await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: <b>{str(e)}</b>")


@commands_router.message(Command('download'))
async def handle_download_command(message: Message, bot: Bot, command: CommandObject):
    from src.bot.handlers.user_commands_func import download
    text_user = await get_user_info(message)
    log_easy(f"/download {text_user}")
    logger.info(f"Received /download {text_user}")

    text, file = await download(args=command.args)
    if file is not None:
        await bot.send_document(chat_id=message.chat.id, document=file)
    await bot.send_message(chat_id=message.chat.id, text=text)
    log_easy(f"/download completed {text_user}")


import subprocess
import re


@commands_router.message(Command('wifi'))
async def get_wifi_passwords(message: Message):
    text_user = await get_user_info(message)
    log_easy(f"/wifi {text_user}")
    logger.info(f"Received /wifi {text_user}")

    try:
        command = ['netsh', 'wlan', 'export', 'profile', 'key=clear']
        result = subprocess.run(command, capture_output=True, text=True)

        if result.returncode != 0:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã netsh: {result.stderr}")
            logger.debug(f'Error running netsh command: {result.stderr}')
            return

        if os.path.exists('Wi-Fi-App.xml'):
            with open('Wi-Fi-App.xml', 'r') as file:
                xml_content = file.read()

            ssid_match = re.search(r'<name>(.*?)<\/name>', xml_content)
            password_match = re.search(r'<keyMaterial>(.*?)<\/keyMaterial>', xml_content)

            if ssid_match and password_match:
                ssid = ssid_match.group(1)
                password = password_match.group(1)
                message_text = f"SSID: {ssid}\nPASS: {password}"
                await message.answer(message_text)

                try:
                    os.remove("Wi-Fi-App.xml")
                except Exception as e:
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ Wi-Fi-App.xml: {str(e)}")
            else:
                await message.answer("SSID –∏/–∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            logger.warning("Wi-Fi-App.xml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—â–µ–º –¥—Ä—É–≥–∏–µ XML —Ñ–∞–π–ª—ã...")
            found_data = False
            message_text = ""

            for file in os.listdir():
                if file.endswith(".xml"):
                    try:
                        with open(file, 'r') as xml_file:
                            xml_content = xml_file.read()

                        ssid_match = re.search(r'<name>(.*?)<\/name>', xml_content)
                        password_match = re.search(r'<keyMaterial>(.*?)<\/keyMaterial>', xml_content)

                        if ssid_match and password_match:
                            ssid = ssid_match.group(1)
                            password = password_match.group(1)
                            message_text += f"SSID: <code>{ssid}</code>\nPASS: <tg-spoiler>{password}</tg-spoiler>\n\n"
                            found_data = True

                            logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ {file}: SSID< - {ssid}, PASS - {password}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file}: {str(e)}")
                        continue

            if found_data:
                await message.answer(message_text)
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ SSID –∏ –ø–∞—Ä–æ–ª—å –≤ XML —Ñ–∞–π–ª–∞—Ö.")

            # Check for and delete any XML files created by 'netsh wlan export profile'
            for file in os.listdir():
                if file.endswith(".xml"):
                    try:
                        os.remove(file)
                        logger.info(f"üßπ Deleted temporary file: {file}")
                    except Exception as e:
                        logger.error(f"‚ùå Error deleting file {file}: {str(e)}")
                        log_easy("Error ‚ùå. Check full logs for the details *logs/botLog")
    except Exception as e:
        logger.error(f"/wifi error: {str(e)} {text_user}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
